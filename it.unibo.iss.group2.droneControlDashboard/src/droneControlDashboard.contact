ContactSystem DroneControlDashboardSystem spaceUpdater [host="localhost" port=8070];

// Structure
Context ctxDroneControlDashboard -o;

Subject cmdDisplay context ctxDroneControlDashboard -w;
Subject gaugeDisplay context ctxDroneControlDashboard -w;

Subject drone external;

Invitation command;		// Generico, il contenuto permette di discriminare tra i singoli comandi
Request initialSpeed;
Dispatch misuration;	// Questa roba contiene un droneState	
//Stream streamFoto 	// Usato per mandare alla centrale (dal drone) tutte le foto della missione

//Interactions
cmdDisplaySendInitialSpeed: cmdDisplay demand initialSpeed to drone;
droneReceiveInitialSpeed: drone grant initialSpeed support=TCP [host="localhost" port=8060];

cmdDisplaySendCommand: cmdDisplay ask command to drone;
droneReceiveCommand: drone accept command support=TCP [host="localhost" port=8060]; 

droneSendMisuration: drone forward misuration to gaugeDisplay;
gaugeDisplayReceiveMisuration: gaugeDisplay serve misuration support=TCP[host="localhost" port=8060];

//Behaviour
BehaviorOf cmdDisplay {
	var command = "stop"
	
	state cmdInit initial
		showMsg("----- COMMAND DISPLAY INIT -----")
		// TODO: aspetta il click dell'utente
		goToState cmdEnd
	endstate
	
	state cmdPreMission
		doOutIn cmdDisplaySendInitialSpeed("fottiti")
		acquireAnswerFor initialSpeed
		showMsg( code.curReplyContent )
		// TODO: asptta start dell'utente
		goToState cmdStartMission
	endstate
	
	state cmdStartMission
		doOutIn cmdDisplaySendCommand("start")
		//acquireOneAckFor command
		call curAcquireOneReply.acquireReply()
		goToState cmdIdle
	endstate
	
	state cmdIdle
		// TODO: l'utente pigia i tasti e in base al tasto viene mandato il comando
		// if bottonePremuto {
		//     command = bottonePremuto()
		//     goToState cmdProcessCommand
		// }
		doOutIn cmdDisplaySendCommand("stop")
		call curAcquireOneReply.acquireReply()
		goToState cmdReceiveStream
	endstate
	
	state cmdProcessCommand
		doOutIn cmdDisplaySendCommand(command)	// invio messaggi di increaseSpeed, decreaseSpeed
		call curAcquireOneReply.acquireReply()
		if {command == "stop"}
		{
			goToState cmdReceiveStream	
		}
		goToState cmdIdle
	endstate
	
	state cmdReceiveStream
		// TODO: ricevere in qualche modo lo stream delle foto
		goToState cmdEnd
	endstate
	
	state cmdEnd
		showMsg("----- COMMAND DISPLAY STOP -----")
		transitToEnd
	endstate	
}

BehaviorOf gaugeDisplay {
		
	state gdInit initial
		showMsg("----- GAUGE DISPLAY START -----")
		goToState gdIdle
	endstate
	
	state gdIdle
		onMessage misuration transitTo gdUpdateView
	endstate
	
	state gdUpdateView
	
		goToState gdIdle
	endstate
	
	state gdEnd
		showMsg("----- rimando indietro -----")
		transitToEnd
	endstate	
}