ContactSystem DroneControlDashboardSystem spaceUpdater [host="localhost" port=8070];

// Structure
Context ctxDroneControlDashboard -o;

Subject cmdDisplay context ctxDroneControlDashboard -w;
Subject gaugeDisplay context ctxDroneControlDashboard -w;

Subject drone external;

Invitation command;		// Generico, il contenuto permette di discriminare tra i singoli comandi
Request initialSpeed;
Dispatch misuration;	// Questa roba contiene un droneState	

Request stream; 	// Usato per mandare alla centrale (dal drone) tutte le foto della missione

//Interactions
cmdDisplaySendInitialSpeed: cmdDisplay demand initialSpeed to drone;
droneReceiveInitialSpeed: drone grant initialSpeed support=TCP [host="localhost" port=8060];

cmdDisplaySendCommand: cmdDisplay ask command to drone;
droneReceiveCommand: drone accept command support=TCP [host="localhost" port=8060]; 

cmdDisplayRequest: cmdDisplay demand stream to drone;
droneGrant: drone grant stream support=TCP [host="localhost" port=8020];

droneSendMisuration: drone forward misuration to gaugeDisplay;
gaugeDisplayReceiveMisuration: gaugeDisplay serve misuration support=TCP[host="localhost" port=8090];

//Behaviour
BehaviorOf cmdDisplay {
	var it.unibo.iss.group2.implementations.messages.Command commandMsg = null
	var it.unibo.iss.group2.interfaces.monitor.ISyncMonitor syncMonitor = null
	var it.unibo.iss.group2.implementations.CmdDisplayView guiCmd = null
	var it.unibo.iss.group2.interfaces.messages.MessageLabels buttonLabel = null
	var java.util.HashMap<String, it.unibo.iss.group2.interfaces.messages.MessageLabels> labels = null		
	var String contentMessage = ""
	
	var fileRequestMsg = ""
	var it.unibo.is.interfaces.platforms.IRawBuffer rowContent = null
	var int curDim = 0 
	var fileDestPath = ""
	var it.unibo.is.interfaces.IContentSegmentable fileToBuild = null
	var int nIter = 0
	
	action java.util.HashMap<String, it.unibo.iss.group2.interfaces.messages.MessageLabels> initLabels()
	action String getDestFilePath(String receivedFileName)
 	action it.unibo.is.interfaces.IContentSegmentable createFileToBuild(String fileDestPath)
 	
	state cmdInit initial
		showMsg("----- COMMAND DISPLAY INIT -----");
		// Inizializzazione strutture dati ausiliarie 
		set labels = call initLabels()
		set syncMonitor = call it.unibo.iss.group2.implementations.monitor.SyncMonitor.instantiate()
		set guiCmd = call it.unibo.iss.group2.implementations.CmdDisplayView.instantiate("Cmd Display", syncMonitor)
		goToState cmdSetInitialSpeedAwait
	endstate

	state cmdSetInitialSpeedAwait onException cmdError
		showMsg("Waiting for SET_SPEED button");
		set buttonLabel = call syncMonitor.waitForButton()
		if {buttonLabel != labels.get("SET_SPEED")}
		{
			showMsg("[ERROR] Unexpected command, doing nothing.");
			goToState cmdSetInitialSpeedAwait
		}
		goToState cmdSetInitialSpeed
	endstate
	
	state cmdSetInitialSpeed onException cmdError
		set contentMessage = eval guiCmd.getSpeed().jsonify()
		doOutIn cmdDisplaySendInitialSpeed(contentMessage)
		// Attesa risposta (request/response) del drone
		acquireAnswerFor initialSpeed
		showMsg(code.curReplyContent)
		goToState cmdPreMission
	endstate
	
	state cmdPreMission onException cmdError
		showMsg("Waiting for START button");
		set buttonLabel = call syncMonitor.waitForButton()
		if {buttonLabel != labels.get("START")}
		{
			showMsg("[ERROR] Unexpected command, doing nothing.");
			goToState cmdPreMission
		}
		goToState cmdStartMission
	endstate
	
	state cmdStartMission onException cmdError
		set commandMsg = call it.unibo.iss.group2.implementations.messages.Start.instantiate()
		doOutIn cmdDisplaySendCommand(call commandMsg.jsonify())
		acquireAckFor command
		goToState cmdIdle
	endstate
	
	state cmdIdle onException cmdError
		showMsg("Waiting for any button");
		set buttonLabel = call syncMonitor.waitForButton()
		goToState cmdProcessCommand
	endstate
	
	state cmdProcessCommand onException cmdError
		if {buttonLabel == labels.get("STOP")}
		{
			set commandMsg = call it.unibo.iss.group2.implementations.messages.Stop.instantiate();
			doOutIn cmdDisplaySendCommand(call commandMsg.jsonify());
			acquireAckFor command;
			showMsg("[COMMAND] STOP");
			goToState cmdReceiveStream
		}
		if {buttonLabel == labels.get("SET_SPEED")}
		{
			set contentMessage = eval guiCmd.getSpeed().jsonify();
			set commandMsg = call it.unibo.iss.group2.implementations.messages.SetSpeed.instantiate(contentMessage);
			showMsg("[COMMAND] SET SPEED " + contentMessage + " " + commandMsg)
		}
		if {buttonLabel == labels.get("INC_SPEED")}
		{
			set commandMsg = call it.unibo.iss.group2.implementations.messages.IncSpeed.instantiate();
			showMsg("[COMMAND] INCREASE SPEED" + commandMsg)
		}
		if {buttonLabel == labels.get("DEC_SPEED")}
		{
			set commandMsg = call it.unibo.iss.group2.implementations.messages.DecSpeed.instantiate();
			showMsg("[COMMAND] DECREASE SPEED")
		}
		if {buttonLabel == labels.get("START")}
		{
			showMsg("[ERROR] Unexpected command, doing nothing.");
			goToState cmdIdle
		}
		doOutIn cmdDisplaySendCommand(call commandMsg.jsonify())	// invio messaggi di increaseSpeed, decreaseSpeed
		acquireAckFor command
		goToState cmdIdle
	endstate
	
	state cmdReceiveStream onException cmdError
		doOutIn cmdDisplayRequest("") 
		goToState receiveFileContent
	endstate
	
  	state receiveFileContent onException cmdError
  		showMsg("Si bloccherˆ?")
  		acquireAnswerFor stream
  		set contentMessage = code.curReplyContent
  		showMsg("Receive file content: " + contentMessage)
 		if {"'END STREAM '" == contentMessage} { goToState cmdEnd }
 		set fileRequestMsg = nIter + "_captured.picture.jpg"
 		set fileDestPath = exec getDestFilePath(fileRequestMsg)  
 		set fileToBuild = exec createFileToBuild(fileDestPath)
		showMsg("2) fileRequestMsg= " + fileRequestMsg  + " fileDestPath=" + fileDestPath)
		goToState receivePhotoChunkContent
  	endstate
  	
 	state receivePhotoChunkContent onException cmdError
		set rowContent = call curAcquireOneReply.acquireRawReply()  
		set curDim = call rowContent.getDim()
  		if {  curDim == 0 }   {
  			showMsg("3) Foto finita, in attesa di json");
  			call fileToBuild.closeReceiving();
  			set fileRequestMsg = nIter + "_captured.status.json";
 			set fileDestPath = exec getDestFilePath(fileRequestMsg);
  			set fileToBuild = exec createFileToBuild(fileDestPath); 
  			acquireAnswerFor stream;  
  			goToState receiveStateChunkContent
  		}
  		call fileToBuild.newSegment(rowContent)
		goToState receivePhotoChunkContent
 	endstate 
 	
 	state receiveStateChunkContent onException cmdError
		set rowContent = call curAcquireOneReply.acquireRawReply()  
		set curDim = call rowContent.getDim()
  		if {  curDim == 0 }   {
  			showMsg("3) Json finito");
  			call fileToBuild.closeReceiving(); 
  			acquireAnswerFor stream;  
  			set nIter = nIter + const.1;
  			goToState receiveFileContent
  		}
  		call fileToBuild.newSegment(rowContent)
		goToState receiveStateChunkContent
 	endstate	    
 
	state cmdEnd
		showMsg("----- COMMAND DISPLAY STOP -----")
		transitToEnd
	endstate
	
	state cmdError 
		showMsg("ERROR ... " + code.curException)
		transitToEnd
	endstate		
}

BehaviorOf gaugeDisplay {
	var it.unibo.iss.group2.implementations.measures.Status statusDrone = new it.unibo.iss.group2.implementations.measures.Status()
	var it.unibo.iss.group2.implementations.GaugeDisplayView guiGauge = null
	
	action String cleanString(String jsonString)
	
	state gdInit initial
		showMsg("----- GAUGE DISPLAY START -----")
		set guiGauge = call it.unibo.iss.group2.implementations.GaugeDisplayView.instantiate("Gauge Display")
		goToState gdIdle
	endstate
	
	state gdIdle
		onMessage misuration transitTo gdUpdateView
	endstate
	
	state gdUpdateView
		showMsg(call cleanString(code.curInputMsgContent))
		set statusDrone = call statusDrone.dejsonify(call cleanString(code.curInputMsgContent)) 
		call guiGauge.updateDisplay(statusDrone)
		goToState gdIdle
	endstate
	
	state gdEnd
		showMsg("----- rimando indietro -----")
		transitToEnd
	endstate	
}