ContactSystem DroneControlDashboardSystem spaceUpdater [host="localhost" port=8070];

// Structure
Context ctxDroneControlDashboard -o;

Subject cmdDisplay context ctxDroneControlDashboard -w;
Subject gaugeDisplay context ctxDroneControlDashboard -w;

Subject drone external;

Invitation command;		// Generico, il contenuto permette di discriminare tra i singoli comandi
Request initialSpeed;	
//Stream streamFoto 	// Usato per mandare alla centrale (dal drone) tutte le foto della missione

//Interactions
operativeUnitSendInitialSpeed: cmdDisplay demand initialSpeed to drone;
droneReceiveInitialSpeed: drone grant initialSpeed support=TCP [host="localhost" port=8060];

operativeUnitSendCommand: cmdDisplay ask command to drone;
droneReceiveCommand: drone accept command support=TCP [host="localhost" port=8060]; 


//Behaviour
BehaviorOf cmdDisplay {
		
	state cmdInit initial
		showMsg("----- COMMAND DISPLAY INIT -----")
		// TODO: aspetta il click dell'utente
		goToState cmdEnd
	endstate
	
	state cmdPreMission
		doOutIn operativeUnitSendInitialSpeed("fottiti")
		acquireAnswerFor initialSpeed
		showMsg( code.curReplyContent )
		// TODO: asptta start dell'utente
		goToState cmdStartMission
	endstate
	
	state cmdStartMission
		doOutIn operativeUnitSendCommand("start")
		//acquireOneAckFor command
		call curAcquireOneReply.acquireReply()
		goToState cmdIdle
	endstate
	
	state cmdIdle
		// TODO: l'utente pigia i tasti e in base al tasto viene mandato il comando
		doOutIn operativeUnitSendCommand("stop")
		call curAcquireOneReply.acquireReply()
		goToState cmdReceiveStream
	endstate
	
	state cmdReceiveStream
		// TODO: ricevere in qualche modo lo stream delle foto
		goToState cmdEnd
	endstate
	
	state cmdEnd
		showMsg("----- COMMAND DISPLAY STOP -----")
		transitToEnd
	endstate	
}

BehaviorOf gaugeDisplay {
		
	state GDStart initial
		showMsg("----- GAUGE DISPLAY START -----")
		goToState GDStop
	endstate
	
	state GDStop
		showMsg("----- rimando indietro -----")
		transitToEnd
	endstate	
}