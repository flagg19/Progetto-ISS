ContactSystem DroneSystem spaceUpdater [host="localhost" port=8070];

Context ctxDrone -o;

//Structure
Subject drone -w;

Subject gaugeDisplay external;

Invitation command;		// Generico, il contenuto permette di discriminare tra i singoli comandi
Request initialSpeed;	
Dispatch misuration;
//Stream streamFoto 	// Usato per mandare alla centrale (dal drone) tutte le foto della missione

//Interactions
droneReceiveInitialSpeed: drone grant initialSpeed support=TCP [host="localhost" port=8060];
droneReceiveCommand: drone accept command support=TCP [host="localhost" port=8060];

droneSendMisuration: drone forward misuration to gaugeDisplay;
gaugeDisplayReceiveMisuration: gaugeDisplay serve misuration support=TCP[host="localhost" port=8060];

//Behaviour
BehaviorOf drone {
		
	var curCommandContent = ""
		
	state droneInit initial
		showMsg("----- DRONE START -----")
		onMessage initialSpeed transitTo droneStop
	endstate
	
	state droneSetInitialSpeed
		// setta la sua velocitˆ ancora come non si sˆ (smanovrando in variabili sue)
		goToState droneStopped
	endstate
	
	state droneStopped
		doIn droneReceiveCommand()
		set curCommandContent = code.curInputMsgContent
		if {"start" == curCommandContent}
		{
			goToState droneFly
		}
		goToState droneStopped
	endstate
	
	state droneFly
		// TODO: mi muovo
		// TODO: consumo
		// TODO: mando info a gauge
		onMessage? command goToState droneProcessCommand
		goToState droneFly
	endstate
	
	state droneProcessCommand
		set curCommandContent = code.curInputMsgContent
		// TODO: fare cose sensate in base al contenuto del comando
		if {"stop" == curCommandContent}
		{
			goToState droneSendStream
		}
		/*if {"increaseSpeed" == curCommandContent}
		{
			// bla bla
			
		}*/
		goToState droneFly
	endstate
	
	state droneSendStream
		// TODO: manda lo stream al command display
		goToState droneStop
	endstate
	
	state droneStop
		replyToRequest initialSpeed("fottiti tu");
		showMsg("----- DRONE STOP-----" + code.curInputMsgContent)
		transitToEnd
	endstate	
}